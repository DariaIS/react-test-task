import React, { useEffect, useState } from 'react';

import { TVariable, TWeather } from '../types';

const URL = "https://api.open-meteo.com/v1/forecast";

const getUrl = ({ lat, long, variables }: Props) => (
    URL + "?" + new URLSearchParams({
        latitude: String(lat),
        longitude: String(long),
        daily: variables.join(','),
        timezone: "Europe/Moscow",
        past_days: "0",
        shortwave_radiation_sum: "0"
    }).toString()
);

interface Props {
    lat: number;
    long: number;

    variables: TVariable[];
}

const _Weather: React.FC<Props> = ({
    lat,
    long,
    variables
}) => {
    const [weather, setWeather] = useState<TWeather>();
    const [error, setError] = useState<string>("");

    useEffect(() => {
        // –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –≤ —Ç–æ–º, —á—Ç–æ –º—ã –ø—ã—Ç–∞–ª–∏—Å—å –∑–∞—Å–µ—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        // –ø–æ—ç—Ç–æ–º—É –≤ weather –º—ã –ø–æ–ª—É—á–∞–ª–∏ `Promise¬†{<pending>}`, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—É–ª –Ω–∞–º fetch
        
        /*
        const url = getUrl({ lat, long, variables });
        fetch(url, { method: 'GET' })
            .then(resp => resp.json())
            .then(resp => {
                setWeather(resp);
            });
        */
        
        // –Ω–æ –º–Ω–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è async / await –ø–æ—ç—Ç–æ–º—É —è –ø–µ—Ä–µ–ø–∏—Å–∞–ª–∞ –Ω–∞ –Ω–µ–≥–æ üåö 
        const fetchWeather = async () => {
            try {
                const url = getUrl({ lat, long, variables });
                let response = await fetch(url, { method: 'GET' } );                        
                const data = await response.json();
                setWeather(data);
                if (error) setError("");
            } catch(err) {
                setError('Oops, something went wrong. You might want to check the console')
                console.error(err);
            }
        }

        fetchWeather();
    }, [lat, long, variables]);

    return error ? (
        <p className='error'>
            {error}
        </p>
    ) : (
        <>
            <h2>
                Your Daily Weather
            </h2>
            <table>
                <thead>
                    <tr>
                        <th>date</th>
                        {variables.map(variable => <th key={variable}>{variable}</th>)}
                    </tr>
                </thead>
                <tbody>
                    {weather && 
                        (weather.daily.time.map((time, index) => (
                            <tr key={time}>
                                <th> {time} </th>

                                {variables.map(variable =>
                                    // —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Ä–∏–¥–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤
                                    // weather.daily, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Ä–Ω–∞–ª—å–Ω–∏–∫
                                    (variable in weather.daily ? (
                                        <td key={variable}>
                                            {weather.daily[variable as keyof typeof weather.daily][index]}
                                        </td>
                                    ) : (
                                        <React.Fragment key={variable}></React.Fragment>
                                    ))
                                )}
                            </tr>
                        ))
                    )}
                </tbody>
            </table>
        </>
    )
}

// –æ–±–µ—Ä–Ω—É–ª–∞ –≤ React.memo —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞–ø–¥–µ–π—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á–µ–∫–±–æ–∫—Å–æ–≤ –∏ –≤–≤–æ–¥–∞ –≤ textarea
export const Weather = React.memo(_Weather);